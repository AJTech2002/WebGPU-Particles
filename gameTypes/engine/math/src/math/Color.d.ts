export class Color {
    constructor(r: any, g: any, b: any);
    isColor: boolean;
    r: number;
    g: number;
    b: number;
    set(value: any): this;
    setScalar(scalar: any): this;
    setHex(hex: any, colorSpace?: string): this;
    setRGB(r: any, g: any, b: any, colorSpace?: string): this;
    setHSL(h: any, s: any, l: any, colorSpace?: string): this;
    setStyle(style: any, colorSpace?: string): this;
    setColorName(style: any, colorSpace?: string): this;
    clone(): any;
    copy(color: any): this;
    copySRGBToLinear(color: any): this;
    copyLinearToSRGB(color: any): this;
    convertSRGBToLinear(): this;
    convertLinearToSRGB(): this;
    getHex(colorSpace?: string): number;
    getHexString(colorSpace?: string): string;
    getHSL(target: any, colorSpace?: string): any;
    getRGB(target: any, colorSpace?: string): any;
    getStyle(colorSpace?: string): string;
    offsetHSL(h: any, s: any, l: any): this;
    add(color: any): this;
    addColors(color1: any, color2: any): this;
    addScalar(s: any): this;
    sub(color: any): this;
    multiply(color: any): this;
    multiplyScalar(s: any): this;
    lerp(color: any, alpha: any): this;
    lerpColors(color1: any, color2: any, alpha: any): this;
    lerpHSL(color: any, alpha: any): this;
    equals(c: any): boolean;
    fromArray(array: any, offset?: number): this;
    toArray(array?: any[], offset?: number): any[];
    toJSON(): number;
    [Symbol.iterator](): Generator<number, void, unknown>;
}
export namespace Color {
    export { _colorKeywords as NAMES };
}
import { SRGBToLinear } from './ColorManagement.js';
declare namespace _colorKeywords {
    let aliceblue: number;
    let antiquewhite: number;
    let aqua: number;
    let aquamarine: number;
    let azure: number;
    let beige: number;
    let bisque: number;
    let black: number;
    let blanchedalmond: number;
    let blue: number;
    let blueviolet: number;
    let brown: number;
    let burlywood: number;
    let cadetblue: number;
    let chartreuse: number;
    let chocolate: number;
    let coral: number;
    let cornflowerblue: number;
    let cornsilk: number;
    let crimson: number;
    let cyan: number;
    let darkblue: number;
    let darkcyan: number;
    let darkgoldenrod: number;
    let darkgray: number;
    let darkgreen: number;
    let darkgrey: number;
    let darkkhaki: number;
    let darkmagenta: number;
    let darkolivegreen: number;
    let darkorange: number;
    let darkorchid: number;
    let darkred: number;
    let darksalmon: number;
    let darkseagreen: number;
    let darkslateblue: number;
    let darkslategray: number;
    let darkslategrey: number;
    let darkturquoise: number;
    let darkviolet: number;
    let deeppink: number;
    let deepskyblue: number;
    let dimgray: number;
    let dimgrey: number;
    let dodgerblue: number;
    let firebrick: number;
    let floralwhite: number;
    let forestgreen: number;
    let fuchsia: number;
    let gainsboro: number;
    let ghostwhite: number;
    let gold: number;
    let goldenrod: number;
    let gray: number;
    let green: number;
    let greenyellow: number;
    let grey: number;
    let honeydew: number;
    let hotpink: number;
    let indianred: number;
    let indigo: number;
    let ivory: number;
    let khaki: number;
    let lavender: number;
    let lavenderblush: number;
    let lawngreen: number;
    let lemonchiffon: number;
    let lightblue: number;
    let lightcoral: number;
    let lightcyan: number;
    let lightgoldenrodyellow: number;
    let lightgray: number;
    let lightgreen: number;
    let lightgrey: number;
    let lightpink: number;
    let lightsalmon: number;
    let lightseagreen: number;
    let lightskyblue: number;
    let lightslategray: number;
    let lightslategrey: number;
    let lightsteelblue: number;
    let lightyellow: number;
    let lime: number;
    let limegreen: number;
    let linen: number;
    let magenta: number;
    let maroon: number;
    let mediumaquamarine: number;
    let mediumblue: number;
    let mediumorchid: number;
    let mediumpurple: number;
    let mediumseagreen: number;
    let mediumslateblue: number;
    let mediumspringgreen: number;
    let mediumturquoise: number;
    let mediumvioletred: number;
    let midnightblue: number;
    let mintcream: number;
    let mistyrose: number;
    let moccasin: number;
    let navajowhite: number;
    let navy: number;
    let oldlace: number;
    let olive: number;
    let olivedrab: number;
    let orange: number;
    let orangered: number;
    let orchid: number;
    let palegoldenrod: number;
    let palegreen: number;
    let paleturquoise: number;
    let palevioletred: number;
    let papayawhip: number;
    let peachpuff: number;
    let peru: number;
    let pink: number;
    let plum: number;
    let powderblue: number;
    let purple: number;
    let rebeccapurple: number;
    let red: number;
    let rosybrown: number;
    let royalblue: number;
    let saddlebrown: number;
    let salmon: number;
    let sandybrown: number;
    let seagreen: number;
    let seashell: number;
    let sienna: number;
    let silver: number;
    let skyblue: number;
    let slateblue: number;
    let slategray: number;
    let slategrey: number;
    let snow: number;
    let springgreen: number;
    let steelblue: number;
    let tan: number;
    let teal: number;
    let thistle: number;
    let tomato: number;
    let turquoise: number;
    let violet: number;
    let wheat: number;
    let white: number;
    let whitesmoke: number;
    let yellow: number;
    let yellowgreen: number;
}
export { SRGBToLinear };
