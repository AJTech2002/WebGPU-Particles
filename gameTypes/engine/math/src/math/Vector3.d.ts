export class Vector3 {
    static fromVec3(vec3: any): Vector3;
    constructor(x?: number, y?: number, z?: number);
    x: number;
    y: number;
    z: number;
    set(x: any, y: any, z: any): this;
    setScalar(scalar: any): this;
    setX(x: any): this;
    setY(y: any): this;
    setZ(z: any): this;
    setComponent(index: any, value: any): this;
    getComponent(index: any): number;
    clone(): any;
    copy(v: any): this;
    add(v: any): this;
    addScalar(s: any): this;
    addVectors(a: any, b: any): this;
    addScaledVector(v: any, s: any): this;
    sub(v: any): this;
    subScalar(s: any): this;
    subVectors(a: any, b: any): this;
    multiply(v: any): this;
    multiplyScalar(scalar: any): this;
    multiplyVectors(a: any, b: any): this;
    applyEuler(euler: any): this;
    applyAxisAngle(axis: any, angle: any): this;
    applyMatrix3(m: any): this;
    applyNormalMatrix(m: any): this;
    applyMatrix4(m: any): this;
    applyQuaternion(q: any): this;
    transformDirection(m: any): this;
    divide(v: any): this;
    divideScalar(scalar: any): this;
    min(v: any): this;
    max(v: any): this;
    clamp(min: any, max: any): this;
    clampScalar(minVal: any, maxVal: any): this;
    clampLength(min: any, max: any): this;
    floor(): this;
    ceil(): this;
    round(): this;
    roundToZero(): this;
    negate(): this;
    dot(v: any): number;
    lengthSq(): number;
    length(): number;
    manhattanLength(): number;
    normalize(): this;
    setLength(length: any): this;
    lerp(v: any, alpha: any): this;
    lerpVectors(v1: any, v2: any, alpha: any): this;
    cross(v: any): this;
    crossVectors(a: any, b: any): this;
    projectOnVector(v: any): this;
    projectOnPlane(planeNormal: any): this;
    reflect(normal: any): this;
    angleTo(v: any): number;
    distanceTo(v: any): number;
    distanceTo2D(v: any): number;
    distanceToSquared(v: any): number;
    distanceToSquared2D(v: any): number;
    manhattanDistanceTo(v: any): number;
    setFromSpherical(s: any): this;
    setFromSphericalCoords(radius: any, phi: any, theta: any): this;
    setFromCylindrical(c: any): this;
    setFromCylindricalCoords(radius: any, theta: any, y: any): this;
    setFromMatrixPosition(m: any): this;
    setFromMatrixScale(m: any): this;
    setFromMatrixColumn(m: any, index: any): this;
    setFromMatrix3Column(m: any, index: any): this;
    setFromEuler(e: any): this;
    equals(v: any): boolean;
    fromArray(array: any, offset?: number): this;
    toArray(array?: any[], offset?: number): any[];
    random(): this;
    randomDirection(): this;
    fromVec3(vec3: any): this;
    toVec3(): vec3;
    [Symbol.iterator](): Generator<number, void, unknown>;
}
import { vec3 } from 'gl-matrix';
